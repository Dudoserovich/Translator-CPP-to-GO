import unittest
import sys
import os

sys.path.insert(1, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import src.code_generator.generator as Generator

class TestCodeGenerator(unittest.TestCase):

    def test_generator_type(self):
        generator = Generator.Generator()
        value = [['func', 'GO', 3], ['main', 'ID', 3], ['(', 'D6', 3], [')', 'D7', 3], ['{', 'D4', 3],
                 ['bool', 'R1', 5], ['b1', 'ID', 5], [';', 'D3', 5], ['char', 'R2', 6], ['c1', 'ID', 6],
                 [';', 'D3', 6], ['int', 'R3', 7], ['i1', 'ID', 7], [';', 'D3', 7], ['float', 'R4', 8],
                 ['f1', 'ID', 8], [';', 'D3', 8], ['double', 'R5', 9], ['d1', 'ID', 9], [';', 'D3', 9],
                 ['bool', 'R1', 11], ['b2', 'ID', 11], ['=', 'O15', 11], ['true', 'R7', 11], [';', 'D3', 11],
                 ['char', 'R2', 12], ['c2', 'ID', 12], ['=', 'O15', 12], ["'c'", 'C', 12], [';', 'D3', 12],
                 ['int', 'R3', 13], ['i2', 'ID', 13], ['=', 'O15', 13], ['43', 'N', 13], [';', 'D3', 13],
                 ['float', 'R4', 14], ['f2', 'ID', 14], ['=', 'O15', 14], ['4', 'N', 14], ['.', 'D1', 14],
                 ['3', 'N', 14], [';', 'D3', 14], ['double', 'R5', 15], ['d2', 'ID', 15], ['=', 'O15', 15],
                 ['4', 'N', 15], ['.', 'D1', 15], ['3', 'N', 15], [';', 'D3', 15], ['return', 'K10', 17],
                 ['0', 'N', 17], [';', 'D3', 17], ['}', 'D5', 18]]
        generator.late(value, 'test_generator_parse/types.go')
        with open('test_generator_parse/types.go', 'r') as f:
            result = f.read().replace("\r\n", "\n")
        with open('test_expected_parse/types.go', 'r') as f:
            expected = f.read().replace("\r\n", "\n")
        self.assertEqual(result, expected)

    # def test_generator_operators(self):
    #     generator = Generator.Generator()
    #     value = [['int', 'R3', 1], ['main', 'ID', 1], ['(', 'D6', 1], [')', 'D7', 1], ['{', 'D4', 1],
    #              ['int', 'R3', 2], ['r', 'ID', 2], ['=', 'O15', 2], ['10', 'N', 2], [';', 'D3', 2], ['int', 'R3', 3],
    #              ['c', 'ID', 3], ['=', 'O15', 3], ['10', 'N', 3], [';', 'D3', 3], ['int', 'R3', 4], ['r', 'ID', 4],
    #              ['=', 'O15', 4], ['0', 'N', 4], [';', 'D3', 4], ['for', 'K3', 6], ['(', 'D6', 6], ['int', 'R3', 6],
    #              ['i', 'ID', 6], ['=', 'O15', 6], ['1', 'N', 6], [';', 'D3', 6], ['i', 'ID', 6], ['<=', 'O12', 6],
    #              ['5', 'N', 6], [';', 'D3', 6], ['i', 'ID', 6], ['=', 'O15', 6], ['i', 'ID', 6],
    #              ['+', 'O1', 6], ['1', 'N', 6], [')', 'D7', 6], ['{', 'D4', 6], ['for', 'K3', 7],
    #              ['(', 'D6', 7], ['int', 'R3', 7], ['k', 'ID', 7], ['=', 'O15', 7], ['5', 'N', 7],
    #              [';', 'D3', 7], ['k', 'ID', 7], ['<=', 'O12', 7], ['10', 'N', 7], [';', 'D3', 7],
    #              ['k', 'ID', 7], ['=', 'O15', 7], ['k', 'ID', 7], ['+', 'O1', 7], ['2', 'N', 7],
    #              [')', 'D7', 7], ['{', 'D4', 7], ['for', 'K3', 8], ['(', 'D6', 8], ['int', 'R3', 8],
    #              ['z', 'ID', 8], ['=', 'O15', 8], ['1', 'N', 8], [';', 'D3', 8], ['z', 'ID', 8],
    #              ['<=', 'O12', 8], ['12', 'N', 8], [';', 'D3', 8], ['z', 'ID', 8], ['=', 'O15', 8],
    #              ['z', 'ID', 8], ['+', 'O1', 8], ['1', 'N', 8], [')', 'D7', 8], ['{', 'D4', 8],
    #              ['c', 'ID', 9], ['=', 'O15', 9], ['c', 'ID', 9], ['*', 'O3', 9], ['5', 'N', 9],
    #              [';', 'D3', 9], ['}', 'D5', 10], ['c', 'ID', 11], ['=', 'O15', 11], ['c', 'ID', 11],
    #              ['*', 'O3', 11], ['10', 'N', 11], [';', 'D3', 11], ['for', 'K3', 12], ['(', 'D6', 12],
    #              ['int', 'R3', 12], ['z', 'ID', 12], ['=', 'O15', 12], ['1', 'N', 12], [';', 'D3', 12],
    #              ['z', 'ID', 12], ['<=', 'O12', 12], ['12', 'N', 12], [';', 'D3', 12], ['z', 'ID', 12],
    #              ['=', 'O15', 12], ['z', 'ID', 12], ['+', 'O1', 12], ['1', 'N', 12], [')', 'D7', 12],
    #              ['{', 'D4', 12], ['c', 'ID', 13], ['=', 'O15', 13], ['c', 'ID', 13], ['*', 'O3', 13],
    #              ['5', 'N', 13], [';', 'D3', 13], ['}', 'D5', 14], ['}', 'D5', 15], ['r', 'ID', 16],
    #              ['=', 'O15', 16], ['r', 'ID', 16], ['+', 'O1', 16], ['1', 'N', 16], [';', 'D3', 16],
    #              ['}', 'D5', 17], ['while', 'K9', 19], ['(', 'D6', 19], ['r', 'ID', 19], ['<=', 'O12', 19],
    #              ['20', 'N', 19], [')', 'D7', 19], ['{', 'D4', 19], ['int', 'R3', 20], ['d', 'ID', 20],
    #              ['=', 'O15', 20], ['10', 'N', 20], [';', 'D3', 20], ['while', 'K9', 21], ['(', 'D6', 21],
    #              ['d', 'ID', 21], ['>=', 'O11', 21], ['5', 'N', 21], [')', 'D7', 21], ['{', 'D4', 21],
    #              ['r', 'ID', 22], ['=', 'O15', 22], ['r', 'ID', 22], ['+', 'O1', 22], ['1', 'N', 22],
    #              [';', 'D3', 22], ['}', 'D5', 23], ['r', 'ID', 24], ['=', 'O15', 24], ['r', 'ID', 24],
    #              ['+', 'O1', 24], ['1', 'N', 24], [';', 'D3', 24], ['}', 'D5', 25], ['do', 'K1', 27],
    #              ['{', 'D4', 27], ['r', 'ID', 28], ['=', 'O15', 28], ['r', 'ID', 28], ['+', 'O1', 28],
    #              ['1', 'N', 28], [';', 'D3', 28], ['do', 'K1', 29], ['{', 'D4', 29], ['c', 'ID', 30],
    #              ['=', 'O15', 30], ['c', 'ID', 30], ['+', 'O1', 30], ['20', 'N', 30], [';', 'D3', 30],
    #              ['}', 'D5', 31], ['while', 'K9', 32], ['(', 'D6', 32], ['c', 'ID', 32], ['<=', 'O12', 32],
    #              ['5000', 'N', 32], [')', 'D7', 32], [';', 'D3', 32], ['}', 'D5', 33], ['while', 'K9', 34],
    #              ['(', 'D6', 34], ['r', 'ID', 34], ['<', 'O10', 34], ['100', 'N', 34], [')', 'D7', 34],
    #              [';', 'D3', 34], ['return', 'K10', 36], ['0', 'N', 36], [';', 'D3', 36], ['}', 'D5', 37]]
    #     generator.late(value, 'test_generator_parse/operators.go')
    #     with open('test_generator_parse/operators.go', 'r') as f:
    #         result = f.read().replace("\r\n", "\n")
    #     with open('test_expected_parse/operators.go', 'r') as f:
    #         expected = f.read().replace("\r\n", "\n")
    #     self.assertEqual(result, expected)



